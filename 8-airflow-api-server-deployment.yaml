# Source: airflow/templates/api-server/api-server-deployment.yaml
################################
## Airflow API Server Deployment
#################################
apiVersion: apps/v1
kind: Deployment
metadata:
  name: airflow-api-server
  namespace: pdp-dev
  labels:
    tier: airflow
    component: api-server
spec:
  replicas: 1
  strategy:
    # Here we define the rolling update strategy
    # - maxSurge define how many pod we can add at a time
    # - maxUnavailable define how many pod can be unavailable
    #   during the rolling update
    # Setting maxUnavailable to 0 would make sure we have the appropriate
    # capacity during the rolling update.
    # You can also use percentage based value instead of integer.
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      tier: airflow
      component: api-server
  template:
    metadata:
      labels:
        tier: airflow
        component: api-server
    spec:
      serviceAccountName: "pdp-default"
      restartPolicy: Always
      securityContext:
        runAsUser: 71357
        fsGroup: 71357
      initContainers:
        - name: wait-for-airflow-migrations
          image: docker-local.artifactory.medimpact.com/com/medimpact/pdp/medgen-airflow-python:0.0.2-build99
          imagePullPolicy: Always
          securityContext: 
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
          volumeMounts:
            - name: config
              mountPath: "/opt/airflow/airflow.cfg"
              subPath: airflow.cfg
              readOnly: true
            - name: config
              mountPath: "/opt/airflow/config/airflow_local_settings.py"
              subPath: airflow_local_settings.py
              readOnly: true
          args:          
            - airflow
            - db
            - check-migrations
            - --migration-wait-timeout=60
          env:          
            # Dynamically created environment variables
            # Dynamically created secret envs
            # Extra env          
            # Hard Coded Airflow Envs
            - name: AIRFLOW__CORE__EXECUTOR
              value: CeleryExecutor
            - name: AIRFLOW__CORE__LOAD_EXAMPLES
              value: "False"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-postgres-creds
                  key: postgres_password
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  name: airflow-fernet-key
                  key: fernet-key
            - name: AIRFLOW_HOME
              value: /opt/airflow
            # For Airflow <2.3, backward compatibility; moved to [database] in 2.3
            - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
              value: postgresql+psycopg2://airflow_user:$(POSTGRES_PASSWORD)@devedb0-vip.medimpact.com:5432/pdp_airflow_db
            - name: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
              value: postgresql+psycopg2://airflow_user:$(POSTGRES_PASSWORD)@devedb0-vip.medimpact.com:5432/pdp_airflow_db
            - name: AIRFLOW_CONN_AIRFLOW_DB
              value: postgresql+psycopg2://airflow_user:$(POSTGRES_PASSWORD)@devedb0-vip.medimpact.com:5432/pdp_airflow_db
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: airflow-webserver-secret-key
                  key: webserver-secret-key
            # - name: AIRFLOW__API_AUTH__JWT_SECRET
            #   valueFrom:
            #     secretKeyRef:
            #       name: airflow-jwt-secret
            #       key: jwt-secret
            - name: AIRFLOW__CELERY__BROKER_URL
              valueFrom:
                secretKeyRef:
                  name: airflow-broker-url
                  key: connection
      containers:
        - name: api-server
          image: docker-local.artifactory.medimpact.com/com/medimpact/pdp/medgen-airflow-python:0.0.2-build99
          imagePullPolicy: Always
          securityContext: 
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
          args:
            - bash
            - -c
            - exec airflow api-server
          resources:
            requests:
              cpu: "500m"
              memory: "1Gi"
            limits:
              cpu: "1"
              memory: "2Gi"
          volumeMounts:
            - name: config
              mountPath: "/opt/airflow/airflow.cfg"
              subPath: airflow.cfg
              readOnly: true
            - name: config
              mountPath: "/opt/airflow/config/airflow_local_settings.py"
              subPath: airflow_local_settings.py
              readOnly: true
          ports:
            - name: api-server
              containerPort: 8080
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 15
            timeoutSeconds: 5
            failureThreshold: 5
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 15
            timeoutSeconds: 5
            failureThreshold: 5
            periodSeconds: 10
          startupProbe:
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 0
            timeoutSeconds: 20
            failureThreshold: 6
            periodSeconds: 10
          env:          
            # Dynamically created environment variables
            # Dynamically created secret envs
            # Extra env          
            # Hard Coded Airflow Envs
            - name: AIRFLOW__CORE__EXECUTOR
              value: CeleryExecutor
            - name: AIRFLOW__CORE__LOAD_EXAMPLES
              value: "False"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-postgres-creds
                  key: postgres_password
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  name: airflow-fernet-key
                  key: fernet-key
            - name: AIRFLOW_HOME
              value: /opt/airflow
            # For Airflow <2.3, backward compatibility; moved to [database] in 2.3
            - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
              value: postgresql+psycopg2://airflow_user:$(POSTGRES_PASSWORD)@devedb0-vip.medimpact.com:5432/pdp_airflow_db
            - name: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
              value: postgresql+psycopg2://airflow_user:$(POSTGRES_PASSWORD)@devedb0-vip.medimpact.com:5432/pdp_airflow_db
            - name: AIRFLOW_CONN_AIRFLOW_DB
              value: postgresql+psycopg2://airflow_user:$(POSTGRES_PASSWORD)@devedb0-vip.medimpact.com:5432/pdp_airflow_db
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-redis-password
                  key: password
            - name: AIRFLOW__CELERY__RESULT_BACKEND
              value: "db+redis://:$(REDIS_PASSWORD)@airflow-redis:6379/1"
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: airflow-webserver-secret-key
                  key: webserver-secret-key
            # - name: AIRFLOW__API_AUTH__JWT_SECRET
            #   valueFrom:
            #     secretKeyRef:
            #       name: airflow-jwt-secret
            #       key: jwt-secret
            - name: AIRFLOW__CELERY__BROKER_URL
              valueFrom:
                secretKeyRef:
                  name: airflow-broker-url
                  key: connection          
      volumes:
        - name: config
          configMap:
            name: airflow-config